<html>
    <head>
	<title>W08: task4</title>
    </head>
    <body>
	<script src="three.min.js"></script>

	<script type="x-shader/x-vertex" id="gouraud.vert">
		varying vec3 point_color;
		varying vec4 point_position;
		varying vec3 normal_vector;
		uniform vec3 light_position;



		vec3 PhongReflection( vec3 C, vec3 L, vec3 N, vec3 V )

		{
			float ka = 0.3;
			float kd = 0.5;
			float ks = 0.8;
			float n = 50.0;
			vec3 R = reflect( -L, N );
			float dd = max( dot( N, L ), 0.0 );
			float ds = pow( max( dot( R, V), 0.0 ), n );
			if ( dd <= 0.0 ) { ds = 0.0; }
			float Ia = ka;
			float Id = kd * dd;
			float Is = ks * ds;
			return C * ( Ia + Id + Is );
		}

		vec3 BlinnPhongReflection( vec3 C, vec3 L, vec3 N, vec3 V)

		{
			float ka = 0.3;
			float kd = 0.5;
			float ks = 0.8;
			float n = 50.0;
			//vec3 R = reflect( -L, N );
			vec3 H = normalize(L+V);
			float dd = max( dot( N, L ), 0.0 );
			float ds = pow( max( dot( H, N), 0.0 ), n );
			if ( dd <= 0.0 ) { ds = 0.0; }
			float Ia = ka;
			float Id = kd * dd;
			float Is = ks * ds;
			return C * ( Ia + Id + Is );
		}

		vec3 CookTorranceReflection( vec3 C, vec3 L, vec3 N, vec3 V)

		{
			//vec3 specular = vec3(0.0);
			float ka = 0.3;
			float kd = 0.5;
			float ks = 0.8;
			float n = 50.0;
			vec3 H = normalize(L+V);
			
			float NH = dot(N, H);
        	float VH = dot(V, H);
        	float NV = dot(N, V);
        	float NL = dot(N, L);
 
        	float alpha = acos(NH);
 
        	// D:ベックマン分布関数
        	float m = 0.3;
        	float D = (1.0/(4.0*m*m*NH*NH*NH*NH))*exp((NH*NH-1.0)/(m*m*NH*NH));
 
        	// G:幾何減衰
        	float G = min(1.0, min((2.0*NH*NV)/VH, (2.0*NH*NL)/VH));

        	// F:フレネル項
        	float c = VH;
        	float f0 = 0.8;
        	float sf = sqrt(f0);
		    float refrac = (1.0 + sf) / (1.0 - sf);
        	float g = sqrt(refrac*refrac+c*c-1.0);
        	float F = ((g-c)*(g-c)/((g+c)*(g+c)))*(1.0+(c*(g+c)-1.0)*(c*(g+c)-1.0)/((c*(g-c)-1.0)*(c*(g-c)-1.0)));
 	
    	    float specularLight = D*G*F/NV;

			float dd = max( dot( N, L ), 0.0 );
			float ds = pow( max( dot( H, N), 0.0 ), n );
			if ( dd <= 0.0 ) { ds = 0.0; }
			float Ia = ka;
			float Id = kd * dd;
			//float Is = ks * ds;
			float Is = specularLight*ks;
			return C * ( Ia + Id + Is );
		}

		void main()
		{
	    	point_position = modelViewMatrix * vec4( position, 1.0 );
			normal_vector = normalMatrix * normal;
			vec3 C = color;
			vec3 L = normalize( light_position - point_position.xyz );
			vec3 N = normalize( normal_vector );
			vec3 V = normalize( -point_position.xyz);
			point_color = CookTorranceReflection( C, L, N, V );
			gl_Position = projectionMatrix * point_position;
	 	}
	</script>

	<script type="x-shader/x-fragment" id="gouraud.frag">
		varying vec3 point_color;

		void main()
		{

			gl_FragColor = vec4( point_color, 1.0 );

		}

	</script>
	<script src="task04_main.js"></script>
	<script>
		main();
	</script>
    </body>
</html>
